// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: humans/transaction_data.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TransactionData struct {
	Index              string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	OriginChain        string `protobuf:"bytes,2,opt,name=originChain,proto3" json:"originChain,omitempty"`
	OriginAddress      string `protobuf:"bytes,3,opt,name=originAddress,proto3" json:"originAddress,omitempty"`
	TargetChain        string `protobuf:"bytes,4,opt,name=targetChain,proto3" json:"targetChain,omitempty"`
	TargetAddress      string `protobuf:"bytes,5,opt,name=targetAddress,proto3" json:"targetAddress,omitempty"`
	Amount             string `protobuf:"bytes,6,opt,name=amount,proto3" json:"amount,omitempty"`
	Time               string `protobuf:"bytes,7,opt,name=time,proto3" json:"time,omitempty"`
	Creator            string `protobuf:"bytes,8,opt,name=creator,proto3" json:"creator,omitempty"`
	Status             string `protobuf:"bytes,9,opt,name=status,proto3" json:"status,omitempty"`
	ConfirmedBlockHash string `protobuf:"bytes,10,opt,name=confirmedBlockHash,proto3" json:"confirmedBlockHash,omitempty"`
	SignedKey          string `protobuf:"bytes,11,opt,name=signedKey,proto3" json:"signedKey,omitempty"`
	Fee                string `protobuf:"bytes,12,opt,name=fee,proto3" json:"fee,omitempty"`
}

func (m *TransactionData) Reset()         { *m = TransactionData{} }
func (m *TransactionData) String() string { return proto.CompactTextString(m) }
func (*TransactionData) ProtoMessage()    {}
func (*TransactionData) Descriptor() ([]byte, []int) {
	return fileDescriptor_75e32c38c61794c0, []int{0}
}
func (m *TransactionData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransactionData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransactionData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransactionData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactionData.Merge(m, src)
}
func (m *TransactionData) XXX_Size() int {
	return m.Size()
}
func (m *TransactionData) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactionData.DiscardUnknown(m)
}

var xxx_messageInfo_TransactionData proto.InternalMessageInfo

func (m *TransactionData) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *TransactionData) GetOriginChain() string {
	if m != nil {
		return m.OriginChain
	}
	return ""
}

func (m *TransactionData) GetOriginAddress() string {
	if m != nil {
		return m.OriginAddress
	}
	return ""
}

func (m *TransactionData) GetTargetChain() string {
	if m != nil {
		return m.TargetChain
	}
	return ""
}

func (m *TransactionData) GetTargetAddress() string {
	if m != nil {
		return m.TargetAddress
	}
	return ""
}

func (m *TransactionData) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

func (m *TransactionData) GetTime() string {
	if m != nil {
		return m.Time
	}
	return ""
}

func (m *TransactionData) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *TransactionData) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *TransactionData) GetConfirmedBlockHash() string {
	if m != nil {
		return m.ConfirmedBlockHash
	}
	return ""
}

func (m *TransactionData) GetSignedKey() string {
	if m != nil {
		return m.SignedKey
	}
	return ""
}

func (m *TransactionData) GetFee() string {
	if m != nil {
		return m.Fee
	}
	return ""
}

func init() {
	proto.RegisterType((*TransactionData)(nil), "humansdotai.humans.humans.TransactionData")
}

func init() { proto.RegisterFile("humans/transaction_data.proto", fileDescriptor_75e32c38c61794c0) }

var fileDescriptor_75e32c38c61794c0 = []byte{
	// 321 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x91, 0xbd, 0x4a, 0x03, 0x41,
	0x14, 0x85, 0xb3, 0xf9, 0x35, 0x13, 0x45, 0xb9, 0x88, 0x8c, 0xa0, 0x4b, 0x10, 0x0b, 0x0b, 0xd9,
	0x14, 0x3e, 0x81, 0x51, 0x44, 0xb0, 0x13, 0x2b, 0x1b, 0xb9, 0xd9, 0x99, 0xec, 0x0e, 0xba, 0x33,
	0x61, 0xe6, 0x2e, 0x24, 0x6f, 0xe1, 0x63, 0x59, 0xa6, 0xb4, 0x94, 0xe4, 0x19, 0xec, 0x65, 0x67,
	0x12, 0x92, 0x80, 0xd5, 0x9e, 0xf3, 0x9d, 0xbb, 0x5f, 0x33, 0xec, 0x3c, 0x2f, 0x0b, 0xd4, 0x6e,
	0x40, 0x16, 0xb5, 0xc3, 0x94, 0x94, 0xd1, 0x6f, 0x02, 0x09, 0x93, 0x89, 0x35, 0x64, 0xe0, 0x34,
	0xcc, 0xc2, 0x10, 0xaa, 0x24, 0xe4, 0xd5, 0xe7, 0xe2, 0xb7, 0xce, 0x0e, 0x5f, 0x36, 0x7f, 0xdd,
	0x23, 0x21, 0x1c, 0xb3, 0x96, 0xd2, 0x42, 0x4e, 0x79, 0xd4, 0x8f, 0xae, 0xba, 0xcf, 0xa1, 0x40,
	0x9f, 0xf5, 0x8c, 0x55, 0x99, 0xd2, 0x77, 0x39, 0x2a, 0xcd, 0xeb, 0x7e, 0xdb, 0x46, 0x70, 0xc9,
	0x0e, 0x42, 0xbd, 0x15, 0xc2, 0x4a, 0xe7, 0x78, 0xc3, 0xdf, 0xec, 0xc2, 0xca, 0x43, 0x68, 0x33,
	0x49, 0xc1, 0xd3, 0x0c, 0x9e, 0x2d, 0x54, 0x79, 0x42, 0x5d, 0x7b, 0x5a, 0xc1, 0xb3, 0x03, 0xe1,
	0x84, 0xb5, 0xb1, 0x30, 0xa5, 0x26, 0xde, 0xf6, 0xf3, 0xaa, 0x01, 0xb0, 0x26, 0xa9, 0x42, 0xf2,
	0x8e, 0xa7, 0x3e, 0x03, 0x67, 0x9d, 0xd4, 0x4a, 0x24, 0x63, 0xf9, 0x9e, 0xc7, 0xeb, 0x5a, 0x59,
	0x1c, 0x21, 0x95, 0x8e, 0x77, 0x83, 0x25, 0x34, 0x48, 0x18, 0xa4, 0x46, 0x8f, 0x95, 0x2d, 0xa4,
	0x18, 0x7e, 0x98, 0xf4, 0xfd, 0x11, 0x5d, 0xce, 0x99, 0xbf, 0xf9, 0x67, 0x81, 0x33, 0xd6, 0x75,
	0x2a, 0xd3, 0x52, 0x3c, 0xc9, 0x19, 0xef, 0xf9, 0xb3, 0x0d, 0x80, 0x23, 0xd6, 0x18, 0x4b, 0xc9,
	0xf7, 0x3d, 0xaf, 0xe2, 0xf0, 0xe1, 0x6b, 0x11, 0x47, 0xf3, 0x45, 0x1c, 0xfd, 0x2c, 0xe2, 0xe8,
	0x73, 0x19, 0xd7, 0xe6, 0xcb, 0xb8, 0xf6, 0xbd, 0x8c, 0x6b, 0xaf, 0xd7, 0x99, 0xa2, 0xbc, 0x1c,
	0x25, 0xa9, 0x29, 0x06, 0x5b, 0xef, 0xb6, 0xca, 0x83, 0xe9, 0x3a, 0xd0, 0x6c, 0x22, 0xdd, 0xa8,
	0xed, 0x5f, 0xf8, 0xe6, 0x2f, 0x00, 0x00, 0xff, 0xff, 0xd7, 0x67, 0xb7, 0x2a, 0x02, 0x02, 0x00,
	0x00,
}

func (m *TransactionData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransactionData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransactionData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Fee) > 0 {
		i -= len(m.Fee)
		copy(dAtA[i:], m.Fee)
		i = encodeVarintTransactionData(dAtA, i, uint64(len(m.Fee)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.SignedKey) > 0 {
		i -= len(m.SignedKey)
		copy(dAtA[i:], m.SignedKey)
		i = encodeVarintTransactionData(dAtA, i, uint64(len(m.SignedKey)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.ConfirmedBlockHash) > 0 {
		i -= len(m.ConfirmedBlockHash)
		copy(dAtA[i:], m.ConfirmedBlockHash)
		i = encodeVarintTransactionData(dAtA, i, uint64(len(m.ConfirmedBlockHash)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintTransactionData(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTransactionData(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Time) > 0 {
		i -= len(m.Time)
		copy(dAtA[i:], m.Time)
		i = encodeVarintTransactionData(dAtA, i, uint64(len(m.Time)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintTransactionData(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.TargetAddress) > 0 {
		i -= len(m.TargetAddress)
		copy(dAtA[i:], m.TargetAddress)
		i = encodeVarintTransactionData(dAtA, i, uint64(len(m.TargetAddress)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.TargetChain) > 0 {
		i -= len(m.TargetChain)
		copy(dAtA[i:], m.TargetChain)
		i = encodeVarintTransactionData(dAtA, i, uint64(len(m.TargetChain)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.OriginAddress) > 0 {
		i -= len(m.OriginAddress)
		copy(dAtA[i:], m.OriginAddress)
		i = encodeVarintTransactionData(dAtA, i, uint64(len(m.OriginAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.OriginChain) > 0 {
		i -= len(m.OriginChain)
		copy(dAtA[i:], m.OriginChain)
		i = encodeVarintTransactionData(dAtA, i, uint64(len(m.OriginChain)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintTransactionData(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTransactionData(dAtA []byte, offset int, v uint64) int {
	offset -= sovTransactionData(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TransactionData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovTransactionData(uint64(l))
	}
	l = len(m.OriginChain)
	if l > 0 {
		n += 1 + l + sovTransactionData(uint64(l))
	}
	l = len(m.OriginAddress)
	if l > 0 {
		n += 1 + l + sovTransactionData(uint64(l))
	}
	l = len(m.TargetChain)
	if l > 0 {
		n += 1 + l + sovTransactionData(uint64(l))
	}
	l = len(m.TargetAddress)
	if l > 0 {
		n += 1 + l + sovTransactionData(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovTransactionData(uint64(l))
	}
	l = len(m.Time)
	if l > 0 {
		n += 1 + l + sovTransactionData(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTransactionData(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovTransactionData(uint64(l))
	}
	l = len(m.ConfirmedBlockHash)
	if l > 0 {
		n += 1 + l + sovTransactionData(uint64(l))
	}
	l = len(m.SignedKey)
	if l > 0 {
		n += 1 + l + sovTransactionData(uint64(l))
	}
	l = len(m.Fee)
	if l > 0 {
		n += 1 + l + sovTransactionData(uint64(l))
	}
	return n
}

func sovTransactionData(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTransactionData(x uint64) (n int) {
	return sovTransactionData(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TransactionData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransactionData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransactionData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransactionData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransactionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransactionData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransactionData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginChain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransactionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransactionData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransactionData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginChain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransactionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransactionData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransactionData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetChain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransactionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransactionData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransactionData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetChain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransactionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransactionData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransactionData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransactionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransactionData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransactionData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransactionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransactionData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransactionData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Time = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransactionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransactionData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransactionData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransactionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransactionData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransactionData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfirmedBlockHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransactionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransactionData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransactionData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConfirmedBlockHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignedKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransactionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransactionData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransactionData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignedKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransactionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransactionData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransactionData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fee = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTransactionData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTransactionData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTransactionData(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTransactionData
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTransactionData
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTransactionData
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTransactionData
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTransactionData
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTransactionData
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTransactionData        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTransactionData          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTransactionData = fmt.Errorf("proto: unexpected end of group")
)
